#!/usr/bin/env python
import math
import cairo
import argparse

"""Specification:
BLOCKS_ALONG, BLOCKS_HIGH
blocks_along x blocks_high characters describing block centers
(blocks_along+1) x (blocks_high+1) characters describing block junctions
"""

MAY_CROSS_VERTICALLY = 1
MAY_CROSS_HORIZONTALLY = 2


class Specification(object):
    def __init__(self, text):
        lines = [i.strip() for i in text.split("\n")]
        self.width, self.height = list(map(int, lines[0].split()))
        self.block_restrictions = [
            [3 for _ in range(self.height)] for __ in range(self.width)
        ]
        self.junction_restrictions = [
            [3 for _ in range(self.height + 1)] for __ in range(self.width + 1)
        ]
        for i in range(self.width):
            for j in range(self.height):
                if lines[j + 1][i] == "|":
                    self.block_restrictions[i][j] = MAY_CROSS_VERTICALLY
                if lines[j + 1][i] == "-":
                    self.block_restrictions[i][j] = MAY_CROSS_HORIZONTALLY
        for i in range(self.width + 1):
            for j in range(self.height + 1):
                if lines[j + self.height + 1][i] == "|":
                    self.junction_restrictions[i][j] = MAY_CROSS_VERTICALLY
                if lines[j + self.height + 1][i] == "-":
                    self.junction_restrictions[i][j] = MAY_CROSS_HORIZONTALLY


parser = argparse.ArgumentParser()
parser.add_argument("--guide", action="store_true")
parser.add_argument("--thickness", type=float, default=1)
parser.add_argument("--size", type=int, default=1024)
parser.add_argument("--knot-size", type=float, default=0.12)
parser.add_argument("-o", "--output", type=str, default="knot.png")
parser.add_argument("spec", default="-", nargs="?")
args = parser.parse_args()

if args.spec != "-":
    spec = Specification(open(args.spec).read())
else:
    import sys

    spec = Specification(sys.stdin.read())

WIDTH, HEIGHT = args.size, args.size
BLOCK_WIDTH, BLOCK_HEIGHT = args.knot_size, args.knot_size
NUM_BLOCKS_WIDE, NUM_BLOCKS_HIGH = spec.width, spec.height


def get_block_center(x, y):
    return (
        0.5 + (x - NUM_BLOCKS_WIDE / 2.0 + 0.5) * BLOCK_WIDTH,
        0.5 + (y - NUM_BLOCKS_HIGH / 2.0 + 0.5) * BLOCK_HEIGHT,
    )


def get_junction_center(x, y):
    return (
        0.5 + (x - NUM_BLOCKS_WIDE / 2.0) * BLOCK_WIDTH,
        0.5 + (y - NUM_BLOCKS_HIGH / 2.0) * BLOCK_HEIGHT,
    )


def cell_present(x, y):
    return 0 <= x < NUM_BLOCKS_WIDE and 0 <= y < NUM_BLOCKS_HIGH


def clear_canvas():
    ctx.set_source_rgb(1, 1, 1)
    ctx.rectangle(0, 0, 1, 1)
    ctx.fill()


def make_guides():
    ctx.set_source_rgba(0, 0, 0, 0.3)
    ctx.set_line_width(0.01)
    for i in range(NUM_BLOCKS_WIDE):
        for j in range(NUM_BLOCKS_HIGH):
            center = get_block_center(i, j)
            ctx.rectangle(
                center[0] - BLOCK_WIDTH / 2.0,
                center[1] - BLOCK_HEIGHT / 2.0,
                BLOCK_WIDTH,
                BLOCK_HEIGHT,
            )
    ctx.stroke()


surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, WIDTH, HEIGHT)
ctx = cairo.Context(surface)
line_thickness = 0.03 * args.thickness

ctx.scale(max(WIDTH, HEIGHT), max(WIDTH, HEIGHT))

clear_canvas()
if args.guide:
    make_guides()

ctx.set_line_cap(cairo.LINE_CAP_ROUND)

flags = spec.block_restrictions

for i in range(NUM_BLOCKS_WIDE):
    for j in range(NUM_BLOCKS_HIGH):
        center = get_block_center(i, j)
        if flags[i][j] == 3:
            ctx.set_line_width(line_thickness)
            ctx.set_source_rgba(0, 0, 0, 1)
            ctx.move_to(center[0] - 0.25 * BLOCK_WIDTH, center[1] + 0.25 * BLOCK_HEIGHT)
            ctx.line_to(center[0] + 0.25 * BLOCK_WIDTH, center[1] - 0.25 * BLOCK_HEIGHT)
            ctx.stroke()
            ctx.set_line_width(line_thickness * 1.5)
            ctx.set_source_rgba(1, 1, 1, 1)
            ctx.move_to(
                center[0] + 0.125 * BLOCK_WIDTH, center[1] + 0.125 * BLOCK_HEIGHT
            )
            ctx.line_to(
                center[0] - 0.125 * BLOCK_WIDTH, center[1] - 0.125 * BLOCK_HEIGHT
            )
            ctx.stroke()
            ctx.set_line_width(line_thickness)
            ctx.set_source_rgba(0, 0, 0, 1)
            ctx.move_to(center[0] + 0.25 * BLOCK_WIDTH, center[1] + 0.25 * BLOCK_HEIGHT)
            ctx.line_to(center[0] - 0.25 * BLOCK_WIDTH, center[1] - 0.25 * BLOCK_HEIGHT)
            ctx.stroke()
        elif flags[i][j] == MAY_CROSS_VERTICALLY:
            ctx.set_line_width(line_thickness)
            ctx.set_source_rgba(0, 0, 0, 1)
            ctx.move_to(center[0] - 0.25 * BLOCK_WIDTH, center[1] - 0.25 * BLOCK_HEIGHT)
            ctx.line_to(center[0] - 0.25 * BLOCK_WIDTH, center[1] + 0.25 * BLOCK_HEIGHT)
            ctx.move_to(center[0] + 0.25 * BLOCK_WIDTH, center[1] - 0.25 * BLOCK_HEIGHT)
            ctx.line_to(center[0] + 0.25 * BLOCK_WIDTH, center[1] + 0.25 * BLOCK_HEIGHT)
            ctx.stroke()
        elif flags[i][j] == MAY_CROSS_HORIZONTALLY:
            ctx.set_line_width(line_thickness)
            ctx.set_source_rgba(0, 0, 0, 1)
            ctx.move_to(center[0] - 0.25 * BLOCK_WIDTH, center[1] - 0.25 * BLOCK_HEIGHT)
            ctx.line_to(center[0] + 0.25 * BLOCK_WIDTH, center[1] - 0.25 * BLOCK_HEIGHT)
            ctx.move_to(center[0] + 0.25 * BLOCK_WIDTH, center[1] + 0.25 * BLOCK_HEIGHT)
            ctx.line_to(center[0] - 0.25 * BLOCK_WIDTH, center[1] + 0.25 * BLOCK_HEIGHT)
            ctx.stroke()

flags = spec.junction_restrictions

errors = set()
for i in range(NUM_BLOCKS_WIDE + 1):
    for j in range(NUM_BLOCKS_HIGH + 1):
        celldone = False
        if (flags[i][j] & MAY_CROSS_VERTICALLY) and (
            flags[i][j] & MAY_CROSS_HORIZONTALLY
        ):
            if (
                cell_present(i - 1, j - 1)
                and cell_present(i - 1, j)
                and cell_present(i, j - 1)
                and cell_present(i, j)
            ):
                center = get_junction_center(i, j)
                ctx.set_source_rgba(0, 0, 0, 1)
                ctx.move_to(
                    center[0] + 0.25 * BLOCK_WIDTH, center[1] + 0.25 * BLOCK_HEIGHT
                )
                ctx.line_to(
                    center[0] - 0.25 * BLOCK_WIDTH, center[1] - 0.25 * BLOCK_HEIGHT
                )
                ctx.stroke()
                ctx.set_line_width(line_thickness * 1.5)
                ctx.set_source_rgba(1, 1, 1, 1)
                ctx.move_to(
                    center[0] - 0.125 * BLOCK_WIDTH, center[1] + 0.125 * BLOCK_HEIGHT
                )
                ctx.line_to(
                    center[0] + 0.125 * BLOCK_WIDTH, center[1] - 0.125 * BLOCK_HEIGHT
                )
                ctx.stroke()
                ctx.set_line_width(line_thickness)
                ctx.set_source_rgba(0, 0, 0, 1)
                ctx.move_to(
                    center[0] - 0.25 * BLOCK_WIDTH, center[1] + 0.25 * BLOCK_HEIGHT
                )
                ctx.line_to(
                    center[0] + 0.25 * BLOCK_WIDTH, center[1] - 0.25 * BLOCK_HEIGHT
                )
                ctx.stroke()
                celldone = True
        elif (flags[i][j] & MAY_CROSS_VERTICALLY) and (
            flags[i][j] & MAY_CROSS_HORIZONTALLY == 0
        ):
            center = get_junction_center(i, j)
            ctx.set_line_width(line_thickness)
            ctx.set_source_rgba(0, 0, 0, 1)
            if cell_present(i - 1, j - 1) and cell_present(i - 1, j):
                ctx.move_to(
                    center[0] - 0.25 * BLOCK_WIDTH, center[1] - 0.25 * BLOCK_HEIGHT
                )
                ctx.line_to(
                    center[0] - 0.25 * BLOCK_WIDTH, center[1] + 0.25 * BLOCK_HEIGHT
                )
                celldone = True
            if cell_present(i, j - 1) and cell_present(i, j):
                ctx.move_to(
                    center[0] + 0.25 * BLOCK_WIDTH, center[1] - 0.25 * BLOCK_HEIGHT
                )
                ctx.line_to(
                    center[0] + 0.25 * BLOCK_WIDTH, center[1] + 0.25 * BLOCK_HEIGHT
                )
                celldone = True
            ctx.stroke()
        elif (flags[i][j] & MAY_CROSS_VERTICALLY == 0) and (
            flags[i][j] & MAY_CROSS_HORIZONTALLY
        ):
            center = get_junction_center(i, j)
            ctx.set_line_width(line_thickness)
            ctx.set_source_rgba(0, 0, 0, 1)
            if cell_present(i - 1, j - 1) and cell_present(i, j - 1):
                ctx.move_to(
                    center[0] - 0.25 * BLOCK_WIDTH, center[1] - 0.25 * BLOCK_HEIGHT
                )
                ctx.line_to(
                    center[0] + 0.25 * BLOCK_WIDTH, center[1] - 0.25 * BLOCK_HEIGHT
                )
                celldone = True
            if cell_present(i - 1, j) and cell_present(i, j):
                ctx.move_to(
                    center[0] - 0.25 * BLOCK_WIDTH, center[1] + 0.25 * BLOCK_HEIGHT
                )
                ctx.line_to(
                    center[0] + 0.25 * BLOCK_WIDTH, center[1] + 0.25 * BLOCK_HEIGHT
                )
                celldone = True
            ctx.stroke()
        elif (flags[i][j] & MAY_CROSS_VERTICALLY == 0) and (
            flags[i][j] & MAY_CROSS_HORIZONTALLY == 0
        ):
            pass

        if not celldone:
            errors.add((i, j))

print("There were {} errors after first pass".format(len(errors)))
print("Creating side seams")
lhserrors = []
rhserrors = []
for i in errors:
    if i[0] == 0:
        lhserrors.append(i)
    if i[0] == NUM_BLOCKS_WIDE:
        rhserrors.append(i)
lhserrors.sort()
rhserrors.sort()

inFix = False
fixstarts = []
fixends = []
for error in lhserrors:
    i, j = error
    errors.remove(error)
    center = get_junction_center(i, j)
    if cell_present(i, j):
        ctx.move_to(center[0] + 0.25 * BLOCK_WIDTH, center[1] + 0.25 * BLOCK_HEIGHT)
        ctx.line_to(center[0], center[1] + 0.25 * BLOCK_HEIGHT)
        if inFix:
            ctx.line_to(center[0] - 0.25 * BLOCK_HEIGHT, center[1] + 0.5 * BLOCK_HEIGHT)
            fixends.append(error)
            inFix = False
        else:
            ctx.line_to(center[0] - 0.25 * BLOCK_HEIGHT, center[1] + 0.5 * BLOCK_HEIGHT)
            fixstarts.append(error)
            inFix = True
    if cell_present(i, j - 1):
        ctx.move_to(center[0] + 0.25 * BLOCK_WIDTH, center[1] - 0.25 * BLOCK_HEIGHT)
        ctx.line_to(center[0], center[1] - 0.25 * BLOCK_HEIGHT)
        if inFix:
            ctx.line_to(center[0] - 0.25 * BLOCK_HEIGHT, center[1] - 0.5 * BLOCK_HEIGHT)
            fixends.append(error)
            inFix = False
        else:
            ctx.line_to(center[0] - 0.25 * BLOCK_HEIGHT, center[1] - 0.5 * BLOCK_HEIGHT)
            fixstarts.append(error)
            inFix = True
    ctx.stroke()

for error in rhserrors:
    i, j = error
    errors.remove(error)
    center = get_junction_center(i, j)
    if cell_present(i - 1, j):
        ctx.move_to(center[0] - 0.25 * BLOCK_WIDTH, center[1] + 0.25 * BLOCK_HEIGHT)
        ctx.line_to(center[0], center[1] + 0.25 * BLOCK_HEIGHT)
        if inFix:
            ctx.line_to(center[0] + 0.25 * BLOCK_HEIGHT, center[1] + 0.5 * BLOCK_HEIGHT)
            fixends.append(error)
            inFix = False
        else:
            ctx.line_to(center[0] + 0.25 * BLOCK_HEIGHT, center[1] + 0.5 * BLOCK_HEIGHT)
            fixstarts.append(error)
            inFix = True
    if cell_present(i - 1, j - 1):
        ctx.move_to(center[0] - 0.25 * BLOCK_WIDTH, center[1] - 0.25 * BLOCK_HEIGHT)
        ctx.line_to(center[0], center[1] - 0.25 * BLOCK_HEIGHT)
        if inFix:
            ctx.line_to(center[0] + 0.25 * BLOCK_HEIGHT, center[1] - 0.5 * BLOCK_HEIGHT)
            fixends.append(error)
            inFix = False
        else:
            ctx.line_to(center[0] + 0.25 * BLOCK_HEIGHT, center[1] - 0.5 * BLOCK_HEIGHT)
            fixstarts.append(error)
            inFix = True
    ctx.stroke()

for start, end in zip(fixstarts, fixends):
    if end[1] - start[1] < 2:
        continue
    center1 = get_junction_center(start[0], start[1] + 1)
    center2 = get_junction_center(end[0], end[1] - 1)
    if end[0] == 0:
        ctx.move_to(center1[0] - 0.25 * BLOCK_WIDTH, center1[1] - 0.5 * BLOCK_HEIGHT)
        ctx.line_to(center2[0] - 0.25 * BLOCK_WIDTH, center2[1] + 0.5 * BLOCK_HEIGHT)
    else:
        ctx.move_to(center1[0] + 0.25 * BLOCK_WIDTH, center1[1] - 0.5 * BLOCK_HEIGHT)
        ctx.line_to(center2[0] + 0.25 * BLOCK_WIDTH, center2[1] + 0.5 * BLOCK_HEIGHT)
    ctx.stroke()

print("There were {} errors after second pass".format(len(errors)))

# Crop
NEW_HEIGHT = int(WIDTH * BLOCK_HEIGHT * (NUM_BLOCKS_HIGH + 1))
surface2 = cairo.ImageSurface(cairo.FORMAT_ARGB32, WIDTH, NEW_HEIGHT)
ctx2 = cairo.Context(surface2)

ctx2.set_source_surface(
    surface,
    0,
    -int(HEIGHT / 2.0 - BLOCK_HEIGHT * ((NUM_BLOCKS_HIGH + 1) / 2.0) * HEIGHT),
)
ctx2.rectangle(0, 0, WIDTH, NEW_HEIGHT)
ctx2.fill()

surface2.write_to_png(args.output)
